{"version":3,"sources":["components/CustomLoginPage.js","components/UrlPost.js","components/UrlPostEdit.js","components/firebaseLoad.js","components/Post.js","components/UrlGaleria.js","components/UrlGaleriaEdit.js","components/Galeria.js","App.js","serviceWorker.js","index.js"],"names":["CustomLoginForm","props","style","fontFamily","marginLeft","LoginForm","href","class","CustomLoginPage","Login","UrlPost","record","source","useState","imgs","setImgs","useEffect","ar","Object","values","map","e","i","className","key","UrlPostEdit","setImgState","acceptMultiple","label","placeholder","validate","removeImage","isCancelled","console","log","setImagens","onDrop","useCallback","acceptedFiles","forEach","file","push","URL","createObjectURL","useDropzone","accept","multiple","noClick","getRootProps","getInputProps","open","isDragActive","type","onClick","alt","src","splice","removeImg","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","urlToFile","url","a","fetch","then","r","blob","validatePost","errors","title","content","date","PostFilter","Filter","TextInput","alwaysOn","ListPost","isSmall","useMediaQuery","theme","breakpoints","down","List","filters","SimpleList","primaryText","secondaryText","published","tertiaryText","Date","toLocaleDateString","Datagrid","rowClick","TextField","ImageField","DateField","BooleanField","CreatePost","message","setMessage","openMessage","setOpenMessage","success","setSuccess","imgsmall","setImgsmall","SaveWithImagesButton","useCreate","create","redirectTo","useRedirect","notify","useNotify","basePath","handleSave","redirect","id","small","uploadTask","ref","put","on","snapshot","progress","bytesTransferred","totalBytes","error","getDownloadURL","downloadURL","index","img","uploadTask2","downloadURL2","payload","data","onSuccess","newRecord","smart_count","SaveButton","onSave","PostEditToolbar","Toolbar","Create","SimpleForm","toolbar","disabled","defaultValue","React","useMemo","Math","random","toString","substr","multiline","value","DateInput","BooleanInput","Snackbar","autoHideDuration","Alert","severity","EditPost","removedImgs","setRemovedImgs","removeFromDB","srcs","Array","isArray","search","refFromURL","delete","err","useUpdate","update","undefined","isEnter","filter","Edit","UrlGaleriaEdit","onChange","el","target","handleTitleChange","validateGaleria","name","ListGaleria","updated_at","EditGaleria","GaleriaEditToolbar","CreateGaleria","titles","config","options","logging","dataProvider","FirebaseDataProvider","authProvider","FirebaseAuthProvider","i18nProvider","polyglotI18nProvider","ptBrMessages","App","Admin","loginPage","Resource","list","edit","icon","GaleriaIcon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.816e8095.chunk.js","sourcesContent":["// LoginPage.js\r\nimport React from \"react\";\r\nimport { Login, LoginForm } from \"react-admin\";\r\nimport Button from '@material-ui/core/Button';\r\n//import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\n//import firebase from 'firebase';\r\n//import ForgotPasswordButton from './CustomForgotPassword'\r\n\r\n/* Configure FirebaseUI.\r\nconst uiConfig = {\r\n  // Popup signin flow rather than redirect flow.\r\n  signInFlow: 'popup',\r\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n  signInSuccessUrl: '#/',\r\n  // We will display Google and Facebook as auth providers.\r\n  signInOptions: [\r\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\r\n  ]\r\n};*/\r\n\r\n//const SignInScreen = () => <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>;\r\n\r\nconst CustomLoginForm = props => (\r\n  <div>\r\n    <div style={{fontFamily: \"monospace\", marginLeft: '15px'}}>\r\n      <p>Digite seu email e senha cadastrados</p>\r\n    </div>\r\n    <LoginForm {...props} />\r\n    <a href=\"https://altieriescultor.com/\" class=\"goToSite\">IR PARA O SITE</a>\r\n  </div>\r\n);\r\n\r\nconst CustomLoginPage = props => (\r\n  <Login {...props}>\r\n    <CustomLoginForm {...props}/>\r\n  </Login>\r\n);\r\n\r\nexport default CustomLoginPage;","import React,{useState,useEffect} from 'react';\r\n\r\nexport default function UrlPost({ record = {}, source }){\r\n    \r\n    const [imgs,setImgs]=useState([]);\r\n\r\n    useEffect(()=>{\r\n\r\n      if(record[source]){\r\n      if(typeof record[source] !== 'object'){\r\n          var ar=[record[source]];\r\n              setImgs(ar);\r\n      }else{\r\n          setImgs(Object.values(record[source]));\r\n      }}   \r\n\r\n    },[record,source]);\r\n\r\n    return(\r\n        <>\r\n        {imgs.map((e,i)=>\r\n          <div className=\"urlPost\" key={i}><a href={e} >{i}</a></div>\r\n        )}\r\n        </>\r\n    );\r\n}\r\n","import React,{useState,useCallback,useEffect} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n//import {FileInput} from 'react-admin';\r\n//import {storage} from 'firebase/storage';\r\n\r\n\r\nexport default function UrlPostEdit({ record = {}, source ,setImgState,acceptMultiple,label,placeholder,validate,removeImage}){\r\n\r\n    const [imgs,setImgs]=useState([]);\r\n\r\n    useEffect(()=>{\r\n        var isCancelled=false;\r\n        function setImagens(){\r\n        var ar;\r\n        if(record[source]){\r\n        if(typeof record[source] !== 'object'){\r\n                ar=[record[source]];\r\n                if(!isCancelled){\r\n                setImgs(ar);\r\n                }\r\n        }else{\r\n            ar=Object.values(record[source]);\r\n            if(!isCancelled){\r\n            setImgs(ar);\r\n            }\r\n        }}   \r\n        console.log(record);\r\n        }\r\n        setImagens();\r\n        return () => {\r\n            isCancelled = true;\r\n        }; \r\n    },[record,source]);\r\n        \r\n    const onDrop = useCallback(acceptedFiles => {   \r\n        var ar=imgs;\r\n        console.log(ar);\r\n        acceptedFiles.forEach(file => {\r\n            if(acceptMultiple){\r\n                ar.push(URL.createObjectURL(file));\r\n            }else{\r\n                ar=[URL.createObjectURL(file)];\r\n            }\r\n        });\r\n        setImgs(ar);\r\n        if(setImgState){\r\n            setImgState(ar);\r\n        }\r\n        if(typeof validate !== 'undefined'){\r\n        validate(ar);\r\n        }\r\n        console.log(ar);\r\n      },[imgs,validate,setImgState,acceptMultiple]);\r\n    \r\n    function removeImg(i){\r\n        var ar=imgs;\r\n        removeImage(imgs[i]);\r\n        ar.splice(i,1)\r\n        setImgs(ar);\r\n        if(setImgState){\r\n            setImgState(ar);\r\n        }\r\n    }\r\n\r\n    const {getRootProps, getInputProps, open,isDragActive} = useDropzone({accept: 'image/*',multiple:acceptMultiple,noClick: true,onDrop});\r\n    \r\n    return(\r\n        <>\r\n            <label className=\"MuiFormLabel-root MuiInputLabel-root  \">\r\n                <span>{label}</span></label>\r\n                <div {...getRootProps()} className=\"UrlPostEditContainer\"> \r\n                    <input {...getInputProps()} />\r\n                    {\r\n                    isDragActive ?\r\n                    <p>{placeholder}</p> :\r\n                    <>\r\n                    <p>{placeholder}</p>\r\n                    <button type=\"button\" onClick={open}>Clique para selecionar</button>\r\n                    </>\r\n                    }\r\n                    <div className=\"preview\">\r\n                    {typeof imgs === 'object' && imgs.map((e,i)=>\r\n                        <div className=\"imageContainer\" key={i}><img alt=\"imagem\" src={e} className=\"imgEdit\" />\r\n                        <span className=\"btnDeleteImage\" onClick={()=>removeImg(i)}>X</span></div>\r\n                    )}\r\n                    </div>\r\n                </div>\r\n        </>\r\n    );\r\n}\r\n","import firebase from '@firebase/app';\r\nimport '@firebase/storage';   \r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyD46nX4-Ks9WMiQ1hazUe2PZAkGX_Cq7kQ\",\r\n    authDomain: \"altiereescultor.firebaseapp.com\",\r\n    databaseURL: \"https://altiereescultor.firebaseio.com\",\r\n    projectId: \"altiereescultor\",\r\n    storageBucket: \"altiereescultor.appspot.com\",\r\n    messagingSenderId: \"851171901718\",\r\n    appId: \"1:851171901718:web:3f1bf7c3d4867dc7d25037\",\r\n    measurementId: \"G-D5SPTWZ2H0\"\r\n  };\r\n\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n    }\r\n\r\n    const storage = firebase.storage();\r\n    export  {\r\n        storage, firebase as default\r\n      }","import React, { useState, useCallback } from 'react';\r\nimport { List,Edit, Datagrid,SimpleList, TextField, ImageField,DateField,BooleanField,Filter,Create, SimpleForm, TextInput, DateInput, BooleanInput, Toolbar, SaveButton, useCreate, useRedirect, useNotify,useUpdate } from 'react-admin';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport UrlPost from './UrlPost';\r\nimport UrlPostEdit from './UrlPostEdit';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { storage } from \"./firebaseLoad\";\r\n\r\nasync function urlToFile(url) {\r\n    //A Blob() is almost a File() - it's just missing the two properties below which we will add\r\n    return fetch(url).then(r => r.blob());\r\n}\r\n\r\nconst validatePost = (values) => {\r\n    const errors = {};\r\n    if (!values.title) {\r\n        errors.title = ['É necessário preencher o título'];\r\n    }\r\n    if (!values.content) {\r\n        errors.content = ['É necessário preencher o conteúdo'];\r\n    }\r\n    if (!values.date) {\r\n        errors.date = ['É necessário uma data'];\r\n    }\r\n    return errors;\r\n};\r\n\r\nconst PostFilter = (props) => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Pesquisar\" source=\"title\" alwaysOn />\r\n    </Filter>\r\n);\r\n\r\nexport const ListPost=(props)=>{\r\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    return (\r\n    <List {...props} title=\"Posts\" filters={<PostFilter />}>\r\n        {isSmall ? (\r\n                <SimpleList\r\n                    primaryText={record => record.title}\r\n                    secondaryText={record => `${record.published ?(\"Publicado\"):(\"Não Publicado\")}`}\r\n                    tertiaryText={record => new Date(record.date).toLocaleDateString()}\r\n                />\r\n            ) : (\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"title\" label=\"Título\"/>\r\n            <TextField source=\"content\" label=\"Conteúdo\"/>\r\n            <ImageField source=\"imgsmall\" />\r\n            <UrlPost source=\"imgs\"/>\r\n            <DateField source=\"date\" label=\"Data\"/>\r\n            <BooleanField source=\"published\" label=\"Publicado\"/>\r\n            <DateField source=\"lastupdate\" label=\"Atualizado em\"/>\r\n        </Datagrid>\r\n            )}\r\n    </List>\r\n)};\r\n\r\nexport const CreatePost=(props)=>{\r\n\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [openMessage, setOpenMessage] = useState(false);\r\n    const [success,setSuccess]=useState(false);\r\n    const [imgs, setImgs] = useState([]);\r\n    const [imgsmall, setImgsmall] = useState('');\r\n\r\n    var makeID = function (toSet) {\r\n        var newId = Math.random().toString(36).substr(2, 9);\r\n        return newId;\r\n    };\r\n\r\n    const SaveWithImagesButton = (props) => {\r\n        const [create] = useCreate('colecao');\r\n        const redirectTo = useRedirect();\r\n        const notify = useNotify();\r\n        const { basePath } = props;\r\n    \r\n        const handleSave = useCallback(\r\n            async function (values, redirect) {\r\n                console.log(values);\r\n                console.log(props.imgs);\r\n                console.log(props.imgsmall);\r\n                var imgsmall = props.imgsmall;\r\n                var imgs = props.imgs;\r\n                var id = values.id;\r\n                var title = values.title;\r\n                var small = await urlToFile(imgsmall);\r\n                var ar = { imgsmall: '', imgs: [] };\r\n                const uploadTask = storage.ref(`/colecao/${id}/imgsmall/${title}`)\r\n                    .put(small);\r\n                uploadTask.on('state_changed', function (snapshot) {\r\n                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                    console.log('Upload is ' + progress + '% done for imgsmall');\r\n                    setMessage('Upload is ' + progress + '% done for imgsmall');\r\n                    setSuccess(true);\r\n                    setOpenMessage(true);\r\n                }, function (error) {\r\n                    setMessage('Upload error: ' + error + ' for imgsmall');\r\n                    setSuccess(false);\r\n                    setOpenMessage(true);\r\n                }, function () {\r\n                    uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                        console.log('File available at', downloadURL);\r\n                        ar.imgsmall = downloadURL;\r\n                        var index=0;\r\n                        imgs.forEach(async (e, i) => {\r\n                            var img = await urlToFile(e);\r\n                            var uploadTask2 = storage.ref(`/colecao/${id}/imgs/${title}-${i}`)\r\n                                .put(img);\r\n                            uploadTask2.on('state_changed', function (snapshot) {\r\n                                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                                console.log('Upload is ' + progress + '% done for imgs');\r\n                                setMessage('Upload is ' + progress + '% done for imgs');\r\n                                setSuccess(true);\r\n                                setOpenMessage(true);\r\n                            }, function (error) {\r\n                                setMessage('Upload error: ' + error + ' for imgs');\r\n                                setSuccess(false);\r\n                                setOpenMessage(true);\r\n                            }, function () {\r\n                                uploadTask2.snapshot.ref.getDownloadURL().then(function (downloadURL2) {\r\n                                    console.log('File available at', downloadURL2);\r\n                                    ar.imgs.push(downloadURL2);\r\n                                    console.log(imgs.length);\r\n                                    console.log(index);\r\n    \r\n                                    if (index === imgs.length-1) {\r\n                                        if (ar != null) {\r\n                                            console.log(ar);\r\n                                            create(\r\n                                                {\r\n                                                    payload: { data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                                },\r\n                                                {\r\n                                                    onSuccess: ({ data: newRecord }) => {\r\n                                                        notify('ra.notification.created', 'info', {\r\n                                                            smart_count: 1,\r\n                                                        });\r\n                                                        redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                                    },\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    index++;\r\n                                });\r\n                            });\r\n                        })\r\n    \r\n                    });\r\n                });\r\n    \r\n            },\r\n            [create, notify, redirectTo, basePath, props.imgs, props.imgsmall]\r\n        );\r\n        return <SaveButton {...props} onSave={handleSave} />;\r\n    };\r\n\r\n    const PostEditToolbar = (props) => (\r\n        <Toolbar {...props} >\r\n            <SaveWithImagesButton imgs={imgs} imgsmall={imgsmall} label=\"SALVAR\"/>\r\n        </Toolbar>\r\n    );\r\n\r\n    function validateSmallImage(value) {\r\n        console.log(\"TESTE\");\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"333TESTE\");\r\n\r\n            setImgsmall(value[0]);\r\n\r\n        } else {\r\n            setMessage('É necessário uma imagem de capa!');\r\n            setOpenMessage(true);\r\n\r\n\r\n        }\r\n    }\r\n    function validateImages(value) {\r\n        console.log(\"TESTE222\");\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"333TESTE\");\r\n            setImgs(value);\r\n\r\n        } else {\r\n            setMessage('Insira alguma imagem no Post!');\r\n            setOpenMessage(true);\r\n        }\r\n    }\r\n    return (\r\n        <Create {...props}>\r\n            <SimpleForm validate={validatePost} toolbar={<PostEditToolbar imgsmall={imgsmall} imgs={imgs} />}>\r\n                <TextInput disabled source=\"id\" defaultValue={React.useMemo(() => makeID(true), [])} />\r\n                <TextInput source=\"title\" label=\"Título\" />\r\n                <TextInput multiline source=\"content\" label=\"Conteúdo\" />\r\n                <UrlPostEdit validate={validateSmallImage} source=\"imgsmall\" acceptMultiple={false} label=\"Capa do post\" placeholder=\"Arraste a imagem até aqui ou\" />\r\n                <UrlPostEdit validate={validateImages} source=\"imgs\" acceptMultiple={true} label=\"Imagens\" placeholder=\"Arraste as imagens até aqui ou\" />\r\n                <DateInput source=\"date\" label=\"Data\" />\r\n                <BooleanInput source=\"published\" label=\"Público\" defaultValue={false} />\r\n                <Snackbar open={openMessage} autoHideDuration={3000} >\r\n                    <Alert severity={!success?(\"error\"):(\"success\")}>\r\n                        {message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </SimpleForm>\r\n        </Create>\r\n    )\r\n};\r\n\r\nexport const EditPost=(props)=>{\r\n    const [message, setMessage] = useState('');\r\n    const [openMessage, setOpenMessage] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [imgs, setImgs] = useState([]);\r\n    const [removedImgs, setRemovedImgs] = useState([]);\r\n    const [imgsmall, setImgsmall] = useState('');\r\n    console.log(props);\r\n    \r\n    function validateSmallImage(value) {\r\n        console.log(\"Teste Imagem\");\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"Teste Imagem 2\");\r\n\r\n            setImgsmall(value[0]);\r\n\r\n        } else {\r\n            setMessage('É necessário uma imagem de capa!');\r\n            setOpenMessage(true);\r\n\r\n\r\n        }\r\n    }\r\n    function validateImages(value) {\r\n        console.log(\"Teste Images\");\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"Teste Images2\");\r\n            setImgs(value);\r\n\r\n        } else {\r\n            setMessage('Insira alguma imagem no Post!');\r\n            setOpenMessage(true);\r\n        }\r\n    }\r\n\r\n    function removeImg(src) {\r\n        let ar = removedImgs;\r\n        ar.push(src);\r\n        setRemovedImgs(ar);\r\n    }\r\n\r\n    function removeFromDB(srcs) {\r\n\r\n        if (Array.isArray(srcs)) {\r\n            srcs.forEach((src) => {\r\n                if(src.search('blob:') === -1){\r\n                let source = storage.refFromURL(src);\r\n                source.delete().then(() => {\r\n                    setMessage('Delete Success!');\r\n                    setSuccess(true);\r\n                    setOpenMessage(true);\r\n                }, (err) => {\r\n                    setMessage('Delete error: ' + err);\r\n                    setSuccess(false);\r\n                    setOpenMessage(true);\r\n                });\r\n                 }\r\n            });\r\n        } else if (typeof srcs !== 'undefined' && srcs.search('blob:') === -1) {\r\n            console.log(srcs);\r\n            let source = storage.refFromURL(srcs);\r\n            source.delete().then(() => {\r\n                setMessage('Delete Success!');\r\n                setSuccess(true);\r\n                setOpenMessage(true);\r\n            }, (err) => {\r\n                setMessage('Delete error: ' + err);\r\n                setSuccess(false);\r\n                setOpenMessage(true);\r\n            });\r\n\r\n        }\r\n    }\r\n    const SaveWithImagesButton = (props) => {\r\n        const [update] = useUpdate('colecao');\r\n        const redirectTo = useRedirect();\r\n        const notify = useNotify();\r\n        const { basePath } = props;\r\n\r\n        const handleSave = useCallback(\r\n            async function (values, redirect) {\r\n                removeFromDB(removedImgs);\r\n                var imgsmall = values.imgsmall;\r\n                console.log(imgsmall);\r\n                if(imgsmall === undefined || imgsmall===''){\r\n                    console.log('ttttt');\r\n                   imgsmall=props.imgsmall;\r\n                } \r\n                var imgs = props.imgs;\r\n                if(imgs.length===0){\r\n                    imgs=values.imgs;\r\n                } \r\n                console.log(imgsmall);\r\n                console.log(imgs);\r\n                var id = values.id;\r\n                var title = values.title;\r\n                var small = await urlToFile(imgsmall);\r\n                var ar = { imgsmall: imgsmall, imgs: imgs };\r\n\r\n                if (imgsmall.search('blob:') === 0) {\r\n                    console.log(\"tese 1\");\r\n                    const uploadTask = storage.ref(`/colecao/${id}/imgsmall/${title}`)\r\n                        .put(small);\r\n                    uploadTask.on('state_changed', function (snapshot) {\r\n                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                        console.log('Upload is ' + progress + '% done for imgsmall');\r\n                        setMessage('Upload is ' + progress + '% done for imgsmall');\r\n                        setSuccess(true);\r\n                        setOpenMessage(true);\r\n                    }, function (error) {\r\n                        setMessage('Upload error: ' + error + ' for imgsmall');\r\n                        setSuccess(false);\r\n                        setOpenMessage(true);\r\n                    }, function () {\r\n                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                            console.log('File available at', downloadURL);\r\n                            ar.imgsmall = downloadURL;\r\n                            var index = 0,isEnter=0;\r\n                            imgs.forEach(async (e, i) => { \r\n                                if (e.search('blob:') === 0) { isEnter++;\r\n                                    var img = await urlToFile(e);\r\n                                    var uploadTask2 = storage.ref(`/colecao/${id}/imgs/${title}-${i}`)\r\n                                        .put(img);\r\n                                    uploadTask2.on('state_changed', function (snapshot) {\r\n                                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                                        console.log('Upload is ' + progress + '% done for imgs');\r\n                                        setMessage('Upload is ' + progress + '% done for imgs');\r\n                                        setSuccess(true);\r\n                                        setOpenMessage(true);\r\n                                    }, function (error) {\r\n                                        setMessage('Upload error: ' + error + ' for imgs');\r\n                                        setSuccess(false);\r\n                                        setOpenMessage(true);\r\n                                    }, function () {\r\n                                        uploadTask2.snapshot.ref.getDownloadURL().then(function (downloadURL2) {\r\n                                            console.log('File available at', downloadURL2);\r\n                                            ar.imgs.push(downloadURL2);\r\n                                            if (index === imgs.length - 1) {\r\n                                                if (ar != null) {\r\n                                                    console.log(ar);\r\n                                                    update(\r\n                                                        {\r\n                                                            payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                                        },\r\n                                                        {\r\n                                                            onSuccess: ({ data: newRecord }) => {\r\n                                                                notify('ra.notification.updated', 'info', {\r\n                                                                    smart_count: 1,\r\n                                                                });\r\n                                                                redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                                            },\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            }\r\n\r\n                                        });\r\n                                    });\r\n                                } index++;\r\n                            }); console.log(isEnter); if(isEnter===0){\r\n                                if (ar != null) {\r\n                                    console.log(ar);\r\n                                    update(\r\n                                        {\r\n                                            payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                        },\r\n                                        {\r\n                                            onSuccess: ({ data: newRecord }) => {\r\n                                                notify('ra.notification.updated', 'info', {\r\n                                                    smart_count: 1,\r\n                                                });\r\n                                                redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                            },\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                    });\r\n                } else {\r\n                    console.log(\"tese 2\");\r\n                    var index = 0;\r\n                    imgs.forEach(async (e, i) => {\r\n                        console.log(e.search('blob:'));\r\n                        if (e.search('blob:') === 0) {\r\n                            var img = await urlToFile(e);\r\n                            var uploadTask2 = storage.ref(`/colecao/${id}/imgs/${title}-${i}`)\r\n                                .put(img);\r\n                            uploadTask2.on('state_changed', function (snapshot) {\r\n                                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                                console.log('Upload is ' + progress + '% done for imgs');\r\n                                setMessage('Upload is ' + progress + '% done for imgs');\r\n                                setSuccess(true);\r\n                                setOpenMessage(true);\r\n                            }, function (error) {\r\n                                setMessage('Upload error: ' + error + ' for imgs');\r\n                                setSuccess(false);\r\n                                setOpenMessage(true);\r\n                            }, function () {\r\n                                uploadTask2.snapshot.ref.getDownloadURL().then(function (downloadURL2) {\r\n                                    console.log('File available at', downloadURL2);\r\n                                    ar.imgs.push(downloadURL2);\r\n                                    console.log(imgs.length);\r\n                                    console.log(index);\r\n\r\n                                    if (index === imgs.length - 1) {\r\n                                        if (ar != null) {\r\n                                            console.log(ar);\r\n                                            ar.imgs = ar.imgs.filter((e) => { return e.search('blob:') === -1 });\r\n                                            update(\r\n                                                {\r\n                                                    payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                                },\r\n                                                {\r\n                                                    onSuccess: ({ data: newRecord }) => {\r\n                                                        notify('ra.notification.updated', 'info', {\r\n                                                            smart_count: 1,\r\n                                                        });\r\n                                                        redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                                    },\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n\r\n                                });\r\n                            });\r\n                        } index++;\r\n                    }); console.log(index); if(index===0){\r\n                        if (ar != null) {\r\n                            console.log(ar);\r\n                            update(\r\n                                {\r\n                                    payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                },\r\n                                {\r\n                                    onSuccess: ({ data: newRecord }) => {\r\n                                        notify('ra.notification.updated', 'info', {\r\n                                            smart_count: 1,\r\n                                        });\r\n                                        redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                    },\r\n                                }\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\r\n            },\r\n            [update, notify, redirectTo, basePath, props.imgs, props.imgsmall]\r\n        );\r\n\r\n        // override handleSubmitWithRedirect with custom logic\r\n        return <SaveButton {...props} onSave={handleSave} />;\r\n    };\r\n\r\n    const PostEditToolbar = (props) => (\r\n        <Toolbar {...props} >\r\n            <SaveWithImagesButton imgs={imgs} imgsmall={imgsmall} label=\"SALVAR\"/>\r\n        </Toolbar>\r\n    );\r\n\r\n    function setImgSmallState(e) {\r\n        setImgsmall(e);\r\n    }\r\n    function setImgsState(e) {\r\n        setImgs(e);\r\n    }\r\n    return (\r\n        <Edit {...props}>\r\n            <SimpleForm toolbar={<PostEditToolbar imgsmall={imgsmall} imgs={imgs} />}>\r\n                <TextInput disabled source=\"id\" />\r\n                <TextInput source=\"title\" label=\"Título\" />\r\n                <TextInput multiline source=\"content\" label=\"Conteúdo\"/>\r\n                <UrlPostEdit validate={validateSmallImage} setImgState={setImgSmallState} removeImage={removeImg} source=\"imgsmall\" acceptMultiple={false} label=\"Capa do post\" placeholder=\"Arraste a imagem até aqui ou\" />\r\n                <UrlPostEdit validate={validateImages} setImgState={setImgsState} removeImage={removeImg} source=\"imgs\" acceptMultiple={true} label=\"Imagens\" placeholder=\"Arraste as imagens até aqui ou\" />\r\n                <DateInput source=\"date\" label=\"Data\"/>\r\n                <BooleanInput source=\"published\" label=\"Publicar\"/>\r\n                <DateInput disabled source=\"lastupdate\" label=\"Atualizado em\"/>\r\n                <Snackbar open={openMessage} autoHideDuration={3000} >\r\n                    <Alert severity={!success ? (\"error\") : (\"success\")}>\r\n                        {message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </SimpleForm>\r\n        </Edit>\r\n    )\r\n};","import React,{useState,useEffect} from 'react';\r\n\r\nexport default function UrlPost({ record = {}, source }){\r\n    \r\n    const [imgs,setImgs]=useState([]);\r\n\r\n    useEffect(()=>{\r\n\r\n      if(record[source]){\r\n      if(typeof record[source] !== 'object'){\r\n          var ar=[record[source]];\r\n              setImgs(ar);\r\n      }else{\r\n          setImgs(Object.values(record[source]));\r\n      }}   \r\n\r\n    },[record,source]);\r\n\r\n    return(\r\n        <>\r\n        {imgs.map((e,i)=>\r\n          <div className=\"urlPost\" key={i}><a href={e.src} >{i}</a></div>\r\n        )}\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useCallback, useEffect, Fragment } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nexport default function UrlGaleriaEdit({ record = {}, source, setImgState, acceptMultiple, label, placeholder, validate, removeImage }) {\r\n\r\n    const [imgs, setImgs] = useState([]);\r\n    useEffect(() => {\r\n        var isCancelled = false;\r\n        function setImagens() {\r\n            var ar;\r\n            if (record[source]) {\r\n                if (typeof record[source] !== 'object') {\r\n                    ar = [record[source]];\r\n                    if (!isCancelled) {\r\n                        setImgs(ar);\r\n                    }\r\n                } else {\r\n                    ar = Object.values(record[source]);\r\n                    if (!isCancelled) {\r\n                        setImgs(ar);\r\n                    }\r\n                }\r\n            }\r\n            console.log(record);\r\n        }\r\n        setImagens();\r\n        return () => {\r\n            isCancelled = true;\r\n        };\r\n    }, [record, source]);\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        var ar = imgs;\r\n        console.log(ar);\r\n        acceptedFiles.forEach(file => {\r\n            if (acceptMultiple) {\r\n                ar.push({ \"src\": URL.createObjectURL(file) });\r\n            } else {\r\n                ar = [URL.createObjectURL(file)];\r\n            }\r\n        });\r\n        setImgs(ar);\r\n        if (setImgState) {\r\n            setImgState(ar);\r\n        }\r\n        if (typeof validate !== 'undefined') {\r\n            validate(ar);\r\n        }\r\n        console.log(ar);\r\n    }, [imgs, validate, setImgState, acceptMultiple]);\r\n\r\n    const handleTitleChange=(e,i)=>{\r\n        var ar=imgs;\r\n        console.log(e.target.value);\r\n        ar[i].title=e.target.value;\r\n        \r\n    }\r\n\r\n    function removeImg(i) {\r\n        var ar = imgs;\r\n        removeImage(imgs[i]);\r\n        ar.splice(i, 1)\r\n        setImgs(ar);\r\n        if (setImgState) {\r\n            setImgState(ar);\r\n        }\r\n    }\r\n\r\n    const { getRootProps, getInputProps, open, isDragActive } = useDropzone({ accept: 'image/*', multiple: acceptMultiple, noClick: true, onDrop });\r\n\r\n    return (\r\n        <>\r\n            <label className=\"MuiFormLabel-root MuiInputLabel-root  \">\r\n                <span>{label}</span></label>\r\n            <div {...getRootProps()} className=\"UrlPostEditContainer\">\r\n                <input {...getInputProps()} />\r\n                {\r\n                    isDragActive ?\r\n                        <p>{placeholder}</p> :\r\n                        <>\r\n                            <p>{placeholder}</p>\r\n                            <button type=\"button\" onClick={open}>Clique para selecionar</button>\r\n                        </>\r\n                }\r\n                <div className=\"preview\">\r\n                    {typeof imgs === 'object' && imgs.map((e, i) =>\r\n                        <Fragment key={i}>\r\n                            {acceptMultiple ? (\r\n                                <div className=\"imageContainer\" >\r\n                                    <img alt=\"imagem\" src={e.src} className=\"imgEdit\" />\r\n                                    <input className=\"imgGaleriaTitle\" type=\"text\" placeholder=\"Título para a imagem\" onChange={(el)=>handleTitleChange(el,i)} defaultValue={e.title} />\r\n                                    <span className=\"btnDeleteImage\" onClick={() => removeImg(i)}>X</span></div>) : (\r\n                                    <div className=\"imageContainer\" key={i}>\r\n                                        <img alt=\"imagem\" src={e} className=\"imgEdit\" />\r\n                                        <span className=\"btnDeleteImage\" onClick={() => removeImg(i)}>X</span></div>)}\r\n                        </Fragment>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useCallback } from 'react';\r\nimport {List,Edit, Datagrid,SimpleList, TextField, ImageField,BooleanField, Create, SimpleForm, TextInput, BooleanInput, Toolbar, SaveButton, useCreate, useRedirect, useNotify,useUpdate } from 'react-admin';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport UrlGaleria from './UrlGaleria';\r\nimport UrlGaleriaEdit from './UrlGaleriaEdit';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { storage } from \"./firebaseLoad\";\r\n\r\nasync function urlToFile(url) {\r\n    return fetch(url).then(r => r.blob());\r\n}\r\n\r\nconst validateGaleria = (values) => {\r\n    const errors = {};\r\n    if (!values.name) {\r\n        errors.name = ['É necessário preencher o nome'];\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport const ListGaleria=(props)=>{\r\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    console.log(props);\r\n    return(\r\n    <List {...props} title=\"Galeria\">\r\n        {isSmall ? (\r\n                <SimpleList\r\n                    primaryText={record => record.name}\r\n                    secondaryText={record => `${record.published ?(\"Publicado\"):(\"Não Publicado\")}`}\r\n                    tertiaryText={record => new Date(record.updated_at).toLocaleDateString()}\r\n                />\r\n            ) : (\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"name\" label=\"Nome\"/>\r\n            <ImageField source=\"imgsmall\" label=\"Capa\"/>\r\n            <UrlGaleria source=\"imgs\" label=\"Imagens\"/> \r\n            <BooleanField source=\"published\" label=\"Publicar\"/>\r\n        </Datagrid>\r\n            )}\r\n    </List>\r\n)};\r\n\r\n\r\nexport const EditGaleria=(props)=> {\r\n    const [message, setMessage] = useState('');\r\n    const [openMessage, setOpenMessage] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [imgs, setImgs] = useState([]);\r\n    const [imgsmall, setImgsmall] = useState('');\r\n    const [removedImgs, setRemovedImgs] = useState([]);\r\n    console.log(props);\r\n    function validateImages(value) {\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"IMAGENS VALIDADAS\");\r\n            setImgs(value);\r\n        } else {\r\n            setMessage('Insira alguma imagem no Post!');\r\n            setOpenMessage(true);\r\n        }\r\n    }\r\n\r\n    function removeImg(src) {\r\n        let ar = removedImgs;\r\n        ar.push(src);\r\n        setRemovedImgs(ar);\r\n    }\r\n\r\n    function removeFromDB(srcs) {\r\n\r\n        if (Array.isArray(srcs)) {\r\n            srcs.forEach((src) => {\r\n                if(src.search('blob:') === -1){\r\n                let source = storage.refFromURL(src);\r\n                source.delete().then(() => {\r\n                    setMessage('Delete Success!');\r\n                    setSuccess(true);\r\n                    setOpenMessage(true);\r\n                }, (err) => {\r\n                    setMessage('Delete error: ' + err);\r\n                    setSuccess(false);\r\n                    setOpenMessage(true);\r\n                });\r\n                 }\r\n            });\r\n        } else if (typeof srcs !== 'undefined' && srcs.search('blob:') === -1) {\r\n            console.log(srcs);\r\n            let source = storage.refFromURL(srcs);\r\n            source.delete().then(() => {\r\n                setMessage('Delete Success!');\r\n                setSuccess(true);\r\n                setOpenMessage(true);\r\n            }, (err) => {\r\n                setMessage('Delete error: ' + err);\r\n                setSuccess(false);\r\n                setOpenMessage(true);\r\n            });\r\n\r\n        }\r\n    }\r\n    const SaveWithImagesButton = (props) => {\r\n        const [update] = useUpdate('galeria');\r\n        const redirectTo = useRedirect();\r\n        const notify = useNotify();\r\n        const { basePath } = props;\r\n\r\n        const handleSave = useCallback(\r\n            async function (values, redirect) {\r\n                removeFromDB(removedImgs); \r\n                var imgsmall = values.imgsmall;\r\n                console.log(imgsmall);\r\n                if(imgsmall === undefined || imgsmall===''){\r\n                    console.log('ttttt');\r\n                   imgsmall=props.imgsmall;\r\n                } \r\n                var imgs = props.imgs;\r\n                if(imgs.length===0){\r\n                    imgs=values.imgs;\r\n                } \r\n                console.log(imgs);\r\n                var id = values.id;\r\n                var name = values.name;\r\n                var small = await urlToFile(imgsmall);\r\n                var ar = { imgs: imgs,imgsmall: imgsmall }, index = 0;\r\n                console.log(ar);\r\n                if (imgsmall.search('blob:') === 0) {\r\n                    console.log(\"tese 1\");\r\n                    const uploadTask = storage.ref(`/galeria/${id}/imgsmall/${name}`)\r\n                        .put(small);\r\n                    uploadTask.on('state_changed', function (snapshot) {\r\n                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                        console.log('Upload is ' + progress + '% done for imgsmall');\r\n                        setMessage('Upload is ' + progress + '% done for imgsmall');\r\n                        setSuccess(true);\r\n                        setOpenMessage(true);\r\n                    }, function (error) {\r\n                        setMessage('Upload error: ' + error + ' for imgsmall');\r\n                        setSuccess(false);\r\n                        setOpenMessage(true);\r\n                    }, function () {\r\n                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                            console.log('File available at', downloadURL);\r\n                            ar.imgsmall = downloadURL;\r\n                            var index = 0,isEnter=0;\r\n                            imgs.forEach(async (e, i) => { \r\n                                if (e.src.search('blob:') === 0) { isEnter++;\r\n                                    var img = await urlToFile(e);\r\n                                    var uploadTask2 = storage.ref(`/galeria/${id}/imgs/${name}-${i}`)\r\n                                        .put(img);\r\n                                    uploadTask2.on('state_changed', function (snapshot) {\r\n                                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                                        console.log('Upload is ' + progress + '% done for imgs');\r\n                                        setMessage('Upload is ' + progress + '% done for imgs');\r\n                                        setSuccess(true);\r\n                                        setOpenMessage(true);\r\n                                    }, function (error) {\r\n                                        setMessage('Upload error: ' + error + ' for imgs');\r\n                                        setSuccess(false);\r\n                                        setOpenMessage(true);\r\n                                    }, function () {\r\n                                        uploadTask2.snapshot.ref.getDownloadURL().then(function (downloadURL2) {\r\n                                            console.log('File available at', downloadURL2);\r\n                                            ar.imgs.push({src: downloadURL2,title:e.title});\r\n                                            if (index === imgs.length - 1) {\r\n                                                if (ar != null) {\r\n                                                    console.log(ar);\r\n                                                    update(\r\n                                                        {\r\n                                                            payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                                        },\r\n                                                        {\r\n                                                            onSuccess: ({ data: newRecord }) => {\r\n                                                                notify('ra.notification.updated', 'info', {\r\n                                                                    smart_count: 1,\r\n                                                                });\r\n                                                                redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                                            },\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            }\r\n\r\n                                        });\r\n                                    });\r\n                                } index++;\r\n                            }); console.log(isEnter); if(isEnter===0){\r\n                                if (ar != null) {\r\n                                    console.log(ar);\r\n                                    update(\r\n                                        {\r\n                                            payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                        },\r\n                                        {\r\n                                            onSuccess: ({ data: newRecord }) => {\r\n                                                notify('ra.notification.updated', 'info', {\r\n                                                    smart_count: 1,\r\n                                                });\r\n                                                redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                            },\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                    });\r\n                } else {\r\n                    var isEnter=0;\r\n                    imgs.forEach(async (e, i) => {\r\n                        console.log(e.src.search('blob:'));\r\n                        if (e.src.search('blob:') === 0) { isEnter++;\r\n                            var img = await urlToFile(e);\r\n                            var uploadTask2 = storage.ref(`/galeria/${id}/imgs/${name}-${i}`)\r\n                                .put(img);\r\n                            uploadTask2.on('state_changed', function (snapshot) {\r\n                                var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                                console.log('Upload is ' + progress + '% done for imgs');\r\n                                setMessage('Upload is ' + progress + '% done for imgs');\r\n                                setSuccess(true);\r\n                                setOpenMessage(true);\r\n                            }, function (error) {\r\n                                setMessage('Upload error: ' + error + ' for imgs');\r\n                                setSuccess(false);\r\n                                setOpenMessage(true);\r\n                            }, function () {\r\n                                uploadTask2.snapshot.ref.getDownloadURL().then(function (downloadURL2) {\r\n                                    console.log('File available at', downloadURL2);\r\n                                    ar.imgs.push({src:downloadURL2,title:e.title});\r\n                                    console.log(imgs.length);\r\n                                    console.log(index);\r\n                                    if (index === imgs.length - 1) {\r\n                                        if (ar != null) {\r\n                                            console.log(ar);\r\n                                            ar.imgs = ar.imgs.filter((e) => { return e.src.search('blob:') === -1 });\r\n                                            update(\r\n                                                {\r\n                                                    payload: { id: id, data: { ...values, imgs: ar.imgs } },\r\n                                                },\r\n                                                {\r\n                                                    onSuccess: ({ data: newRecord }) => {\r\n                                                        notify('ra.notification.updated', 'info', {\r\n                                                            smart_count: 1,\r\n                                                        });\r\n                                                        redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                                    },\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n\r\n                                });\r\n                            });\r\n                        } index++;\r\n                    }); console.log(isEnter); if(isEnter===0){\r\n                        if (ar != null) {\r\n                            console.log(ar);\r\n                            update(\r\n                                {\r\n                                    payload: { id: id, data: { ...values, imgs: ar.imgs, imgsmall: ar.imgsmall } },\r\n                                },\r\n                                {\r\n                                    onSuccess: ({ data: newRecord }) => {\r\n                                        notify('ra.notification.updated', 'info', {\r\n                                            smart_count: 1,\r\n                                        });\r\n                                        redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                    },\r\n                                }\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n            },[update, notify, redirectTo, basePath, props.imgs,props.imgsmall]\r\n        );\r\n        return <SaveButton {...props} onSave={handleSave} />;\r\n    };\r\n\r\n    const GaleriaEditToolbar = (props) => (\r\n        <Toolbar {...props} >\r\n            <SaveWithImagesButton imgs={imgs} imgsmall={imgsmall} label=\"SALVAR\"/>\r\n        </Toolbar>\r\n    );\r\n    function setImgSmallState(e) {\r\n        setImgsmall(e);\r\n    }\r\n    function setImgsState(e) {\r\n        setImgs(e);\r\n    }\r\n\r\n    function validateSmallImage(value) {\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"IMAGEM VALIDADA\");\r\n            setImgsmall(value[0]);\r\n        } else {\r\n            setMessage('É necessário uma imagem de capa!');\r\n            setOpenMessage(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Edit {...props}>\r\n            <SimpleForm toolbar={<GaleriaEditToolbar imgs={imgs} />}>\r\n                <TextInput disabled source=\"id\" />\r\n                <TextInput source=\"name\" label=\"Nome\"/>\r\n                <UrlGaleriaEdit validate={validateSmallImage} setImgState={setImgSmallState} removeImage={removeImg} source=\"imgsmall\" acceptMultiple={false} label=\"Capa\" placeholder=\"Arraste a imagem até aqui ou\" />\r\n                <UrlGaleriaEdit validate={validateImages} setImgState={setImgsState} removeImage={removeImg} source=\"imgs\" acceptMultiple={true} label=\"Imagens\" placeholder=\"Arraste as imagens até aqui ou\" />\r\n                <BooleanInput source=\"published\" label=\"Publicado\"/>\r\n                <Snackbar open={openMessage} autoHideDuration={3000} >\r\n                    <Alert severity={!success ? (\"error\") : (\"success\")}>\r\n                        {message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </SimpleForm>\r\n        </Edit>\r\n    )\r\n};\r\n\r\n\r\nexport const CreateGaleria=(props)=> {\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [openMessage, setOpenMessage] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [imgs, setImgs] = useState([]);\r\n    const [imgsmall, setImgsmall] = useState('');\r\n\r\n    var makeID = function (toSet) {\r\n        var newId = Math.random().toString(36).substr(2, 9);\r\n        return newId;\r\n    };\r\n\r\n    const SaveWithImagesButton = (props) => {\r\n        const [create] = useCreate('galeria');\r\n        const redirectTo = useRedirect();\r\n        const notify = useNotify();\r\n        const { basePath } = props;\r\n\r\n        const handleSave = useCallback(\r\n            async function (values, redirect) {\r\n                console.log(values);\r\n                console.log(props.imgs);\r\n                var imgs = props.imgs;\r\n                var name = values.name;\r\n                var id = values.id;\r\n                var titles = [];\r\n                var small = await urlToFile(props.imgsmall);\r\n                var ar = { imgs: [],imgsmall:'' }, index = 0;\r\n                const uploadTask = storage.ref(`/galeria/${id}/imgsmall/${name}`)\r\n                    .put(small);\r\n                uploadTask.on('state_changed', function (snapshot) {\r\n                    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                    console.log('Upload is ' + progress + '% done for imgsmall');\r\n                    setMessage('Upload is ' + progress + '% done for imgsmall');\r\n                    setSuccess(true);\r\n                    setOpenMessage(true);\r\n                }, function (error) {\r\n                    setMessage('Upload error: ' + error + ' for imgsmall');\r\n                    setSuccess(false);\r\n                    setOpenMessage(true);\r\n                }, function () {\r\n                    uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                        console.log('File available at', downloadURL);\r\n                        ar.imgsmall = downloadURL;\r\n                imgs.forEach(async (e, i) => {\r\n                    var img = await urlToFile(e.src);\r\n                    titles.push(e.title);\r\n                    var uploadTask2 = storage.ref(`/galeria/${id}/imgs/${name}-${i}`)\r\n                        .put(img);\r\n                    uploadTask2.on('state_changed', function (snapshot) {\r\n                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                        console.log('Upload is ' + progress + '% done for imgs');\r\n                        setMessage('Upload is ' + progress + '% done for imgs');\r\n                        setSuccess(true);\r\n                        setOpenMessage(true);\r\n                    }, function (error) {\r\n                        setMessage('Upload error: ' + error + ' for imgs');\r\n                        setSuccess(false);\r\n                        setOpenMessage(true);\r\n                    }, function () {\r\n                        uploadTask2.snapshot.ref.getDownloadURL().then(function (downloadURL2) {\r\n                            console.log('File available at', downloadURL2);\r\n                            ar.imgs.push({ src: downloadURL2, title: e.title });\r\n                            console.log(imgs.length);\r\n                            console.log(ar);\r\n                            console.log(\"index: \"+index);\r\n                            if (index === imgs.length) {\r\n                                if (ar != null) {\r\n                                    console.log(ar);\r\n                                    create(\r\n                                        {\r\n                                            payload: { data: { ...values, imgs: ar.imgs,imgsmall:ar.imgsmall } },\r\n                                        },\r\n                                        {\r\n                                            onSuccess: ({ data: newRecord }) => {\r\n                                                notify('ra.notification.created', 'info', {\r\n                                                    smart_count: 1,\r\n                                                });\r\n                                                redirectTo(redirect, basePath, newRecord.id, newRecord);\r\n                                            },\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                    }); index++;\r\n                });});});\r\n            }, [create, notify, redirectTo, basePath, props.imgs,props.imgsmall]\r\n        );\r\n        return <SaveButton {...props} onSave={handleSave} />;\r\n    };\r\n\r\n    const GaleriaEditToolbar = (props) => (\r\n        <Toolbar {...props} >\r\n            <SaveWithImagesButton imgs={imgs} imgsmall={imgsmall} label=\"SALVAR\"/>\r\n        </Toolbar>\r\n    );\r\n\r\n    function validateImages(value) {\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"IMAGENS VALIDADAS\");\r\n            setImgs(value);\r\n        } else {\r\n            setMessage('Insira alguma imagem no Post!');\r\n            setOpenMessage(true);\r\n        }\r\n    }\r\n\r\n    function validateSmallImage(value) {\r\n        console.log(value);\r\n        if (typeof value !== 'undefined') {\r\n            console.log(\"IMAGEM VALIDADA\");\r\n\r\n            setImgsmall(value[0]);\r\n\r\n        } else {\r\n            setMessage('É necessário uma imagem de capa!');\r\n            setOpenMessage(true);\r\n\r\n\r\n        }\r\n    }\r\n    return (\r\n        <Create {...props}>\r\n            <SimpleForm validate={validateGaleria} toolbar={<GaleriaEditToolbar imgs={imgs} />}>\r\n                <TextInput disabled source=\"id\" defaultValue={React.useMemo(() => makeID(true), [])} />\r\n                <TextInput source=\"name\" label=\"Nome\" />\r\n                <UrlGaleriaEdit validate={validateSmallImage} source=\"imgsmall\" acceptMultiple={false} label=\"Capa\" placeholder=\"Arraste a imagem até aqui ou\" />\r\n                <UrlGaleriaEdit validate={validateImages} source=\"imgs\" acceptMultiple={true} label=\"Imagens\" placeholder=\"Arraste as imagens até aqui ou\" />\r\n                <BooleanInput source=\"published\" label=\"Público\" defaultValue={false} />\r\n                <Snackbar open={openMessage} autoHideDuration={3000} >\r\n                    <Alert severity={!success ? (\"error\") : (\"success\")}>\r\n                        {message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </SimpleForm>\r\n        </Create>\r\n    )\r\n};","import React from 'react';\nimport { Admin, Resource} from 'react-admin';\nimport {FirebaseAuthProvider,FirebaseDataProvider} from 'react-admin-firebase';\nimport CustomLoginPage from './components/CustomLoginPage';\nimport {ListPost,CreatePost,EditPost} from './components/Post';\nimport {ListGaleria,CreateGaleria,EditGaleria} from './components/Galeria';\nimport GaleriaIcon from '@material-ui/icons/Book';\nimport ptBrMessages from 'ra-language-pt-br';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\nimport './index.css';\n\n\n\nconst config = {\n  apiKey: \"AIzaSyD46nX4-Ks9WMiQ1hazUe2PZAkGX_Cq7kQ\",\n  authDomain: \"altiereescultor.firebaseapp.com\",\n  databaseURL: \"https://altiereescultor.firebaseio.com\",\n  projectId: \"altiereescultor\",\n  storageBucket: \"altiereescultor.appspot.com\",\n  messagingSenderId: \"851171901718\",\n  appId: \"1:851171901718:web:3f1bf7c3d4867dc7d25037\",\n  measurementId: \"G-D5SPTWZ2H0\"\n};\n\nconst options = {\n  logging: true,\n};\n\nconst dataProvider = FirebaseDataProvider(config, options);\nconst authProvider = FirebaseAuthProvider(config, options);\nconst i18nProvider = polyglotI18nProvider(() => ptBrMessages, 'pt-br');\n\nconst App = () => (\n      <Admin dataProvider={dataProvider}\n             loginPage={CustomLoginPage}\n             authProvider={authProvider}\n             i18nProvider={i18nProvider}>\n         <Resource name=\"galeria\" options={{ label: 'Galeria' }} list={ListGaleria} edit={EditGaleria} create={CreateGaleria} icon={GaleriaIcon}/>\n         <Resource name=\"colecao\" options={{ label: 'Posts' }}   list={ListPost} edit={EditPost} create={CreatePost} />\n      </Admin>\n  );\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />\n  \n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}